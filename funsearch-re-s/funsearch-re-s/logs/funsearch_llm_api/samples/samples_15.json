{"sample_order": 15, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    This function prioritizes the task that covers the most points. If two tasks cover the same number of points, \n    it gives priority to the task that is performed by the satellite with the lower index. In case of a tie, \n    the priority will be given to the task with the lowest pass index and if it's also a tie, to the one with the lowest task index.\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. \n    The key is a tuple, in the format of [index of satellite, pass index, task index], and the value is a tuple, \n    containing the indices of points that can be covered by the task.\n    The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. \n    The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    max_coverage = None\n    priority_task = None\n\n    for task, coverage in sorted_combinations.items():\n        if not max_coverage or len(coverage) > len(max_coverage):  # Finds the task with the most coverage\n            max_coverage = coverage\n            priority_task = task\n        elif len(coverage) == len(max_coverage):  # If two tasks have the same coverage\n            if task[0] < priority_task[0]:  # prioritize lower-indexed satellite\n                priority_task = task\n            elif task[0] == priority_task[0]:  # If two tasks are on the same satellite \n                if task[1] < priority_task[1]:  # prioritize lower-indexed pass\n                    priority_task = task\n                elif task[1] == priority_task[1]:  # If two tasks are on the same pass\n                    if task[2] < priority_task[2]:  # prioritize lower-indexed task\n                        priority_task = task\n                        \n    return priority_task if priority_task else list(sorted_combinations.keys())[-1]  # Return the last task if no task was found with coverage.\n\n", "score": 0.5309401090457477}