{"sample_order": 15, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    This is an improved method where we also consider the quantity of tasks that each satellite can cover.\n    The priority will be given to the task that covers the most points and comes from the satellite that can cover the most tasks.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. \n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised, i.e the key of the prioritised task.\n\n    \"\"\"\n    # Create a dict to store the number of tasks each satellite can cover\n    satellite_to_task_count = {}\n\n    for key in sorted_combinations:\n        # key format: [satellite index, pass index, task index]\n        satellite_index = key[0]\n\n        if satellite_index not in satellite_to_task_count:\n            satellite_to_task_count[satellite_index] = 0\n\n        # Check if the task can cover any point\n        if len(sorted_combinations[key]) > 0:\n            satellite_to_task_count[satellite_index] += 1\n\n    # Sort the dict by the number of tasks each satellite can cover\n    sorted_satellite_to_task_count = dict(sorted(satellite_to_task_count.items(), key=lambda item: item[1]))\n\n    # Get the satellite that can cover the most tasks\n    satellite_with_most_tasks = list(sorted_satellite_to_task_count.keys())[-1]\n\n    for key in reversed(list(sorted_combinations.keys())):\n        if key[0] == satellite_with_most_tasks:\n            # Return the key (task) that should be prioritised\n            return key\n\n    return None\n\n", "score": 64.01326699834162}