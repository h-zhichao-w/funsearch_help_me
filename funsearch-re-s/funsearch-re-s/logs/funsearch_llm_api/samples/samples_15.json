{"sample_order": 15, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`.\n\n    It selects the task with the maximum coverage from the sorted combinations if their number is more than a threshold. \n    If not, it simply selects the first task from the combinations.  \n    Also, it gives a priority to tasks which were not served previously.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index]\n\n    \"\"\"\n    # Decide threshold dynamically based on the individual coverage of tasks   \n    threshold = sum(len(coverage) for coverage in sorted_combinations.values()) / len(sorted_combinations)\n\n    # Remove tasks that were served previously.\n    tasks_served_previously = {indicator for indicator, coverage in sorted_combinations.items() if len(coverage)==0}\n    for served_task in tasks_served_previously:\n        sorted_combinations.pop(served_task, None)\n\n    if not sorted_combinations:\n        return None\n\n    # Select the task with maximum coverage. Otherwise, select the task with the maximum id \n    max_coverage_task = max(sorted_combinations.items(), key=lambda x:(len(x[1]), x[0][2]))\n\n    if len(max_coverage_task[1]) > threshold:\n        sorted_combinations.pop(max_coverage_task[0])\n        return max_coverage_task[0]\n\n    # When no task has an acceptable coverage, select the first one \n    first_task = next(iter(sorted_combinations.keys()))\n    sorted_combinations.pop(first_task)\n    return first_task\n\n", "score": null}