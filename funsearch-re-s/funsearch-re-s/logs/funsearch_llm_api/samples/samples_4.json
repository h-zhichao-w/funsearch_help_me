{"sample_order": 4, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority is based on the following conditions:\n    - First priority is given to the task with the maximum number of points it can cover.\n    - If there are multiple tasks with the same maximum coverage, the task with the minimum distance between\n      the satellite and the first point it can cover is prioritized.\n    - If there are multiple tasks with the same maximum coverage and minimum distance, the task with the\n      minimum angle between the satellite, the first point it can cover, and the center of the Earth is prioritized.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format\n                             of [index of satellite, index of pass, index of task], and the value is a tuple,\n                             containing the indices of points that can be covered by the task. The tuple is likely to\n                             be empty, and if so, it means that the corresponding task cannot cover any point. The\n                             dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised, in the format of [satellite index, pass index,\n        task index], i.e. the key of the prioritised task.\n    \"\"\"\n    max_coverage = max(sorted_combinations.values(), key=len)\n    tasks_with_max_coverage = [key for key, value in sorted_combinations.items() if value == max_coverage]\n    \n    if len(tasks_with_max_coverage) == 1:\n        return tasks_with_max_coverage[0]\n    \n    distances = []\n    for task in tasks_with_max_coverage:\n        satellite_idx, pass_idx, _ = task\n        satellite = datasets.satellites[satellite_idx] # Retrieve satellite information\n        task_points = datasets.points[max_coverage[0]] # Retrieve points that can be covered by the task\n        distance = sqrt((satellite['longitude'] - task_points[0]['longitude']) ** 2 + \n                        (satellite['latitude'] - task_points[0]['latitude']) ** 2)\n        distances.append((task, distance))\n    \n    min_distance_task = min(distances, key=lambda x: x[1])[0]\n    \n    satellite_idx, pass_idx, task_idx = min_distance_task\n    satellite = datasets.satellites[satellite_idx]\n    task_points = datasets.points[max_coverage[0]]\n    satellite_coordinates = (satellite['longitude'], satellite['latitude'])\n    point_coordinates = (task_points[0]['longitude'], task_points[0]['latitude'])\n    earth_center_coordinates = (0, 0)\n    \n    angle = calculate_angle(satellite_coordinates, point_coordinates, earth_center_coordinates)\n    min_angle_task = min(distances, key=lambda x: x[1])[0]\n    \n    return min_angle_task\n\n", "score": null}