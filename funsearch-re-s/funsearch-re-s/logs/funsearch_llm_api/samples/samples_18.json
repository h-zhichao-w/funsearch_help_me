{"sample_order": 18, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    An alternative and complex approach for determining the priority task allocation. This function attempts to\n    balance between selecting tasks covering a high number of points and distributing tasks across different satellites and passes.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task.\n\n    Returns:\n        tuple[int, int, int], the prioritised task in the format of [satellite index, pass index, task index].\n    \"\"\"\n    \n    # Initially, try selecting the task covering the maximum number of points\n    max_point_task = max(sorted_combinations, key=lambda x: len(sorted_combinations[x]))\n    max_points = len(sorted_combinations[max_point_task])\n\n    # Evaluate distribution of tasks among satellites and passes\n    satellite_task_count = {}\n    pass_task_count = {}\n    for key in sorted_combinations.keys():\n        sat_id, pass_id, _ = key\n        satellite_task_count[sat_id] = satellite_task_count.get(sat_id, 0) + 1\n        pass_task_count[(sat_id, pass_id)] = pass_task_count.get((sat_id, pass_id), 0) + 1\n\n    most_saturated_sat = max(satellite_task_count, key=satellite_task_count.get)\n    most_saturated_pass = max(pass_task_count, key=pass_task_count.get)\n\n    # Aim to distribute tasks better if the most saturated satellite or pass is too dominant\n    if satellite_task_count[most_saturated_sat] > len(sorted_combinations) / len(satellite_task_count) * 1.5 or \\\n       pass_task_count[most_saturated_pass] > len(sorted_combinations) / len(pass_task_count) * 1.5:\n        for key in sorted_combinations.keys():\n            sat_id, pass_id, _ = key\n            if sat_id != most_saturated_sat and (sat_id, pass_id) != most_saturated_pass:\n                if len(sorted_combinations[key]) > max_points * 0.8:  # Close enough to the max value\n                    return key\n    # Edge case handling: If tasks cover no points or very few, diversify by satellite and pass rather than just points covered\n    if max_points < 3:\n        for key in sorted(sorted_combinations, key=lambda x: len(sorted_combinations[x]), reverse=True):\n            sat_id, pass_id, _ = key\n            if satellite_task_count[sat_id] < len(sorted_combinations) / len(satellite_task_count) and \\\n               pass_task_count[(sat_id, pass_id)] < len(sorted_combinations) / len(pass_task_count): \n                return key  # Select a less utilized satellite and pass combination\n    \n    return max_point_task\n\n", "score": 54.08135041763445}