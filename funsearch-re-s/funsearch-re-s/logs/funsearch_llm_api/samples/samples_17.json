{"sample_order": 17, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    This priority function considers the size of the covered area and the task duration. It prioritises tasks with larger covered areas\n    and shorter durations. The function also assures that the new task does not overlap with already scheduled tasks.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, \n        in the format of [index of satellite, index of pass, index of task], and the value is a tuple, \n        containing the indices of points that can be covered by the task. The tuple is likely to be empty, \n        and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending \n        order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    # Start from the task with the largest coverage\n    for task, coverage in sorted_combinations.items()[::-1]:\n\n        # Skip if cannot cover any area\n        if len(coverage) == 0:\n            continue\n\n        sat_index, pass_index, task_index = task\n\n        # Get task duration\n        task_duration = dataset.GetTaskDuration(sat_index, pass_index, task_index)\n\n        # Skip if the task duration is longer than a threshold\n        if task_duration > TIME_THRESHOLD:\n            continue\n\n        if sat_index not in sat_task_dict:\n            sat_task_dict[sat_index] = [(pass_index, task_index)]\n            return task\n        else:\n            for pass_ind, task_ind in sat_task_dict[sat_index]:\n                # Skip if the new task overlaps with any already scheduled task\n                if dataset.IsOverlap(sat_index, pass_index, task_index, pass_ind, task_ind):\n                    break\n            else:\n                # If the task does not overlap with any already scheduled task, update the task list and return the task\n                sat_task_dict[sat_index].append((pass_index, task_index))\n                return task\n\n    return None\n\n", "score": 0.0}