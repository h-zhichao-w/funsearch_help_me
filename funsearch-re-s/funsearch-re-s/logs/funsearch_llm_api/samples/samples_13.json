{"sample_order": 13, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    An advanced version for task allocation priorities, based on more complex logic including the balance between coverage and the tasks' distribution among satellites.\n    \n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. \n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised.\n    \"\"\"\n    # Initialize a score tracker\n    scores = {}\n\n    # Assign an initial score based on the coverage size (more coverage, higher score)\n    for key, value in sorted_combinations.items():\n        scores[key] = len(value) * 1.5  # Weight of 1.5 for coverage size\n\n    # Further refine score by considering distribution among satellites\n    # Gather counts of tasks per satellite to identify underutilized satellites\n    satellite_tasks_count = {}\n    for key in scores.keys():\n        satellite_index = key[0]\n        if satellite_index not in satellite_tasks_count:\n            satellite_tasks_count[satellite_index] = 1\n        else:\n            satellite_tasks_count[satellite_index] += 1\n    \n    # Assign bonus points for tasks belonging to less utilized satellites\n    for key in scores.keys():\n        satellite_index = key[0]\n        # Assume less utilized satellites should be prioritized, bonus inversely related to tasks count\n        utilization_bonus = 1 / sqrt(satellite_tasks_count[satellite_index])\n        scores[key] += utilization_bonus\n\n    # [Optional] Identify tasks with unique point coverage and further increase their scores\n    # This can be an added logic to prioritize tasks covering points no other tasks can cover.\n    unique_coverage_bonus_tracker = {}\n    for key, value in sorted_combinations.items():\n        for point_index in value:\n            if point_index not in unique_coverage_bonus_tracker:\n                unique_coverage_bonus_tracker[point_index] = [key]  # Initialize with the task as potentially unique\n            else:\n                unique_coverage_bonus_tracker[point_index].append(key)  # Add task as contender for the point\n\n    # Assign a bonus for tasks covering points uniquely\n    for tasks_contending_for_point in unique_coverage_bonus_tracker.values():\n        if len(tasks_contending_for_point) == 1:  # Point is uniquely covered by a single task\n            unique_task_key = tasks_contending_for_point[0]\n            scores[unique_task_key] += 2  # Higher weight for unique coverage\n\n    # Find the task combination with the highest final score\n    prioritised_combination = max(scores, key=scores.get)\n\n    return prioritised_combination\n\n", "score": 55.20832602385346}