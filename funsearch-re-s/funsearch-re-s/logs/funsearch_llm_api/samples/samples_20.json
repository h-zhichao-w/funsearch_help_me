{"sample_order": 20, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, \n            in the format of [index of satellite, index of pass, index of task], and the value is a tuple, \n            containing the indices of points that can be covered by the task. The tuple is likely to be empty, \n            and if so, it means that the corresponding task cannot cover any point. \n            The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    # Prioritise tasks that cover more points\n    # If two tasks cover the same number of points, give priority to the task which comes from a satellite in earlier pass\n    # If two tasks come from the same satellite and pass, and cover the same number of points, give priority to the task with lower index\n    priority_list = list(sorted_combinations.keys())\n    priority_list.sort(key=lambda x: len(sorted_combinations[x]), reverse=True)\n    for i in range(len(priority_list) - 1):\n        if len(sorted_combinations[priority_list[i]]) == len(sorted_combinations[priority_list[i+1]]):\n            if priority_list[i][1] > priority_list[i+1][1]:\n                priority_list[i], priority_list[i+1] = priority_list[i+1], priority_list[i]\n            elif priority_list[i][1] == priority_list[i+1][1] and priority_list[i][2] > priority_list[i+1][2]:\n                priority_list[i], priority_list[i+1] = priority_list[i+1], priority_list[i]\n    return priority_list[0]\n\n", "score": 63.681592039801}