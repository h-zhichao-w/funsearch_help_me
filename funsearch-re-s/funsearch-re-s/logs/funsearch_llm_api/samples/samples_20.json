{"sample_order": 20, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`.\n    In this version, instead of just choosing the task that covers the most number of points, \n    this chooses upon two factors : \n      - task that covers the maximum number of points \n      - task that occur earliest\n\n    The rationale behind it is, the earlier the task is solved, \n    there is less chance that it interferes with any other tasks.\n\n    Args:\n        sorted_combinations (dict): Sorted combinations of task id and its coverage.\n\n    Returns:\n        tuple (int, int, int): The task combination (satellite index, pass index, task index) which iss prioritised.\n    \"\"\"\n\n    # Start with picking the task that cover the most points\n    max_coverage = max(len(v) for v in sorted_combinations.values())\n    max_tasks = [k for k,v in sorted_combinations.items() if len(v) == max_coverage] \n\n    # Amongst those, pick the one which occurs first\n    min_index = min(max_tasks, key = lambda x: x[1])\n\n    # Remove it from the dict so that it is not chosen again.\n    sorted_combinations.pop(min_index)\n\n    return min_index\n\n", "score": null}