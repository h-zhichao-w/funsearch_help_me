{"sample_order": 21, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0` in which we choose the task which covers maximum unique points that have not been covered by any other task before. This approach hence maximizes the coverage of points.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple of (satellite index, pass index, task index), and the value is a list of point indices that can be covered by that task. If list is empty, it means that the corresponding task cannot cover any point.\n\n    Returns:\n        tuple[int, int, int], the task (key) that covers maximum unique points, in format (satellite index, pass index, task index).\n    \"\"\"\n    # Initialize a list to keep track of covered points \n    covered_points = []\n\n    # Iterate over the sorted_combinations\n    for task, task_points in sorted_combinations.items():\n\n        # Check if task covers any new point\n        new_points = [point for point in task_points if point not in covered_points]\n\n        # If some new points are covered, prioritize this task and update covered_points\n        if new_points:\n            covered_points.extend(new_points)\n            return task\n\n    # Return last task in sorted_combinations if no task covers new points\n    return list(sorted_combinations.keys())[-1]\n\n", "score": -17.064849162742938}