{"sample_order": 11, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n    \n    This version tries to priortize tasks that have similar point coverages. \n    If there are multiple tasks with similar point coverages, select the one from the earliest pass. \n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    # count the number of tasks that share the maximum point coverage\n    counter = 0\n    max_covered = len(sorted_combinations[list(sorted_combinations.keys())[-1-counter]])\n    \n    while counter < len(sorted_combinations) and len(sorted_combinations[list(sorted_combinations.keys())[-1-counter]]) == max_covered:\n        counter += 1\n    \n    # among tasks that have similar point coverages, choose the one from the earliest pass\n    prioritised = list(sorted_combinations.keys())[-counter]  # start by assuming the last one is the prioritised task\n    for j in range(1, counter):\n        if sorted_combinations[list(sorted_combinations.keys())[-j]][1] < prioritised[1]:  # if found an earlier pass\n            prioritised = list(sorted_combinations.keys())[-j]  # update the prioritised task\n\n    return prioritised\n\n", "score": null}