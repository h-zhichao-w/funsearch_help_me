{"sample_order": 11, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improvised version of priority_v0, where we try to maximize priority. \n    It uses the inverse of coverage as priority in order to favor tasks with fewer points first. \n    If there are tasks that cover same numbers of points then, a task with larger index is prioritized.\n    \n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], \n        and the value is a tuple, containing the indices of points that can be covered by the task. \n        The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. \n        The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    max_priority = -1\n    selected_combination = -1, -1, -1\n    for combination, value in sorted_combinations.items():\n        if len(value) == 0:\n            # Skip as the task cannot cover any point.\n            continue\n        # We use 1.0/len(value) as priority to favor tasks with fewer points first. \n        priority = 1.0 / len(value)\n        # Larger index gets higher priority when tasks cover the same numbers of points.\n        priority += sum(combination) * 1e-9\n        if priority > max_priority:\n            max_priority = priority\n            selected_combination = combination\n    del sorted_combinations[selected_combination]\n    return selected_combination\n\n", "score": null}