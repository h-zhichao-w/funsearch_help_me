{"sample_order": 6, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`. This version of the function also considers the number of points that a task can cover.\n    However, if multiple tasks can cover the same number of points, this function checks the index of the task and prioritizes the task with the highest index.\n    This approach ensures that, all else being equal, newer tasks (with higher indices) are prioritized.\n\n    Args:\n        sorted_combinations: Same as in `priority_v0`.\n\n    Returns:\n        tuple[int, int, int]: Same as in `priority_v0`.\n    \"\"\"\n    max_priority_index = [-1, -1, -1]\n    max_priority_coverage = -1\n    for index, item in sorted_combinations.items():\n        if len(item) > max_priority_coverage:\n            max_priority_index = index\n            max_priority_coverage = len(item)\n        elif len(item) == max_priority_coverage:\n            if index[2] >= max_priority_index[2]:\n                max_priority_index = index\n    return max_priority_index\n\n", "score": 0.15160734175853463}