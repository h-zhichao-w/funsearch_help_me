{"sample_order": 6, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list. This version of the function gives priority to tasks that cover more unique points\n    and then to tasks that are assigned to passes with the most number of remaining tasks.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n    \"\"\"\n    \n    task_counts = {}\n    \n    # Calculate the number of tasks for each pass\n    for key, value in sorted_combinations.items():\n        pass_index = key[1]\n        if pass_index not in task_counts:\n            task_counts[pass_index] = 0\n        task_counts[pass_index] += 1\n\n    prioritised_combinations = {}\n    \n    # Classify tasks into groups based on the number of points they cover and the number of remaining tasks in their pass\n    for key, value in sorted_combinations.items():\n        pass_index = key[1]\n        num_points = len(value)\n        num_tasks = task_counts[pass_index]\n        if (num_points, num_tasks) not in prioritised_combinations:\n            prioritised_combinations[(num_points, num_tasks)] = []\n        prioritised_combinations[(num_points, num_tasks)].append(key)\n\n    # Sort the groups first by the number of points they cover, and then by the number of remaining tasks in their pass\n    sorted_prioritised_combinations = sorted(prioritised_combinations.items(), key=lambda item: (item[0][0], item[0][1]))\n\n    # Select the task with the most point coverages and in the pass with the most remaining tasks\n    prioritised_key = sorted_prioritised_combinations[-1][1][0]\n    \n    # Remove this task from sorted_combinations\n    if prioritised_key in sorted_combinations:\n        del sorted_combinations[prioritised_key]\n\n    return prioritised_key\n\n", "score": null}