{"sample_order": 2, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`.\n    This version considers both the number of points covered by the task and the index of the pass.\n    It prioritizes tasks that cover more points and have earlier passes.\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index].\n    \"\"\"\n    # Get the list of keys from the sorted combinations\n    keys_list = list(sorted_combinations.keys())\n    # Define the initial maximum number of points and earliest pass index\n    max_coverage = -1\n    earliest_pass = float('inf')\n    # Define index that should be prioritised\n    prioritised_index = -1\n\n    # Iterate over combinations\n    for i in range(len(keys_list)):\n        current_key = keys_list[i]\n        current_coverage = len(sorted_combinations[current_key])\n        current_pass = current_key[1]\n        # If the current combination covers more points, update the max coverage and earliest pass\n        if current_coverage > max_coverage:\n            prioritised_index = i\n            max_coverage = current_coverage\n            earliest_pass = current_pass\n        # If the current combination covers the same number of points but have an earlier pass, update the earliest pass\n        elif current_coverage == max_coverage and current_pass < earliest_pass:\n            prioritised_index = i\n            earliest_pass = current_pass\n\n    # If there's no valid task, return None\n    if prioritised_index == -1:\n        return None\n\n    # Remove the prioritised task from the list\n    prioritised_task = keys_list[prioritised_index]\n    del sorted_combinations[prioritised_task]\n    \n    return prioritised_task\n\n", "score": null}