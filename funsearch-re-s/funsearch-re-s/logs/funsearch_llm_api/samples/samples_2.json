{"sample_order": 2, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`\n    This version will prioritize the task with highest coverage putting into consideration coverage area balance among all satellites.\n    If a task cannot cover any point it will be skipped.\n    \"\"\"\n\n    # Initialize dictionary to maintain the total points covered by each satellite\n    points_covered_by_sat = {}\n\n    # Prioritize tasks with the highest coverage, and, among those, choose operation from\n    # satellite with least total coverage\n    max_coverage = -np.inf\n    max_coverage_key = None\n\n    for key, value in sorted_combinations.items():\n        satellite_index = key[0]\n        coverage = len(value)\n\n        # Skip if task cannot cover a point\n        if coverage == 0:\n            continue\n\n        # If a task can cover more points than the current max_coverage task, prioritize it\n        if coverage > max_coverage:\n            max_coverage = coverage\n            max_coverage_key = key\n            points_covered_by_sat[satellite_index] = coverage\n\n        # If a task can cover the same amount of points as the current max_coverage task,\n        # prioritize the task belongs of the satellite with lesser total coverage\n        elif coverage == max_coverage:\n            if points_covered_by_sat.get(satellite_index, 0) < points_covered_by_sat.get(max_coverage_key[0], 0):\n                max_coverage_key = key\n                points_covered_by_sat[satellite_index] = coverage\n\n    return max_coverage_key if max_coverage_key else (0, 0, 0)\n\n", "score": 54.778031562918834}