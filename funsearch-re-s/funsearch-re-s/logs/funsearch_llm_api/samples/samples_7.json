{"sample_order": 7, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Advanced version of the priority function that considers multiple factors such as coverage size, overlap with\n    already selected tasks, and possibly proximity to other high-priority tasks for satellite task allocation.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised, in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n    \"\"\"\n    # Assuming we have a global record of already selected tasks to account for overlaps\n    global_selected_tasks_coverage = set()\n\n    # Initialize variables to find the best task\n    best_task_key = None\n    best_task_value = -np.inf\n    best_task_overlap = np.inf\n\n    for key, value in sorted_combinations.items():\n        coverage_set = set(value)\n        coverage_size = len(coverage_set)\n\n        # Calculate overlap with already selected tasks\n        overlap_size = len(coverage_set.intersection(global_selected_tasks_coverage))\n\n        # Prioritize based on a combination of factors\n        # Criteria 1: Prefer tasks with larger coverage\n        # Criteria 2: Among tasks with similar coverage, prefer those with less overlap with already selected tasks\n        # Adjust the criteria as needed for your specific problem\n\n        # Example scoring mechanism - can adjust weights\n        score = coverage_size - (0.5 * overlap_size)\n\n        # Update best task based on score, and in case of a tie, prefer the one with less overlap\n        if score > best_task_value or (score == best_task_value and overlap_size < best_task_overlap):\n            best_task_key = key\n            best_task_value = score\n            best_task_overlap = overlap_size\n\n    # If a suitable task was found, update the global record and return the task key\n    if best_task_key:\n        global_selected_tasks_coverage.update(set(sorted_combinations[best_task_key]))\n        return best_task_key\n\n    # If no suitable task was found, return a default response or handle accordingly\n    return (0, 0, 0)  # Adjust this based on your error handling or default behavior requirements\n\n", "score": 55.032021369410586}