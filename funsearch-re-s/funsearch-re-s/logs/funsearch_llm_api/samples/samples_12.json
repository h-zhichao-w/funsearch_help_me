{"sample_order": 12, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority is focusing more on task which can cover larger number of points, but at the same time considering a new element - number of points that are only covered by this task \n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    # get all unique points indexed\n    all_points = []\n    for points in sorted_combinations.values():\n        all_points += points\n    unique_points = set(all_points)\n    # calculate number of times each point is referenced\n    point_reference = {point: all_points.count(point) for point in unique_points}\n    \n    max_score = 0\n    max_score_id = None\n    # loop over tasks, calculate score which consider number of points covered and number unique points it covers\n    for task_id, points in sorted_combinations.items():\n        score = 0\n        for point in points:\n            if point_reference[point] == 1:\n                score += 1.2 # apply more value for unique point\n            else:\n                score += 1\n        if score > max_score:\n            max_score = score\n            max_score_id = task_id\n            \n    return max_score_id\n\n", "score": null}