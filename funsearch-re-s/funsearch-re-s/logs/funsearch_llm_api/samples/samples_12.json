{"sample_order": 12, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    # Prioritize tasks based on the coverage area and additional conditions such as time constraints and satellite capability\n\n    # Initialize an empty list to hold prioritized tasks\n    prioritized_tasks = []\n\n    # Iterate through sorted combinations to apply advanced prioritization logic\n    for task_id, coverage_points in sorted_combinations.items():\n        satellite_index, pass_index, task_index = task_id\n\n        # Example condition to check if a task has a minimum number of coverage points\n        min_coverage_points = 5\n        if len(coverage_points) < min_coverage_points:\n            continue  # Skip tasks that do not meet the minimum coverage requirement\n\n        # Example condition to prioritize tasks based on the pass index (e.g., prefer tasks from earlier passes)\n        early_pass_preference = True\n        if early_pass_preference and pass_index > 5:\n            continue  # Skip tasks from later passes\n\n        # Additional custom logic can be inserted here\n        # For example, you can prioritize tasks based on specific satellite capabilities\n        \n        # Mockup condition to demonstrate how to use the satellite index\n        # Pretend some satellites have special instruments\n        special_instrument_satellites = [1, 3, 5]  # Example satellite indices with special instruments\n        if satellite_index in special_instrument_satellites and len(coverage_points) > 10:\n            # Prioritize these tasks higher\n            prioritized_tasks.append((task_id, len(coverage_points)*1.5))  # Increase priority by multiplying the coverage by 1.5\n        else:\n            prioritized_tasks.append((task_id, len(coverage_points)))\n\n    # Sort the prioritized_tasks list based on our custom priority score, descending\n    prioritized_tasks.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the highest priority task id, ignoring the priority score\n    if prioritized_tasks:\n        return prioritized_tasks[0][0]  # Return only the task id of the highest priority task\n    else:\n        return None  # Return None if no tasks meet the advanced prioritization criteria\n\n", "score": 23.428491066061323}