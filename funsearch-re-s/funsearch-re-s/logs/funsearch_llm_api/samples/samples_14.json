{"sample_order": 14, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`. This function determines which task has the highest priority by finding the task \n    with both high coverage points count and considering satellite availability as well. The task with maximum coverage \n    points by a satellite having minimum tasks gets the highest priority.\n    \"\"\"\n\n    satellites_task_data = dict()\n\n    # Count the number of tasks each satellite has\n    for key, value in sorted_combinations.items():\n        satellite_idx = key[0]\n        if satellite_idx not in satellites_task_data:\n            satellites_task_data[satellite_idx] = {'num_tasks': 0, 'tasks': []}\n        satellites_task_data[satellite_idx]['num_tasks'] += 1\n        satellites_task_data[satellite_idx]['tasks'].append((key, len(value)))\n\n    # Find the satellite with minimum number of tasks\n    min_tasks_satellite = min(satellites_task_data.keys(), key=(lambda key: satellites_task_data[key]['num_tasks']))\n\n    # Sort the tasks of the satellite in descending order by number of coverage points\n    sorted_tasks = sorted(satellites_task_data[min_tasks_satellite]['tasks'], key=lambda task: task[1], reverse=True)\n\n    # if satellite with minimum tasks doesn't have task, then find satellite with next minimum tasks having tasks.\n    if not sorted_tasks:\n        del satellites_task_data[min_tasks_satellite]\n        return priority_v1(satellites_task_data)\n\n    # Select the task with maximum coverage points and remove task from sorted_combination list\n    prioritised_task = sorted_tasks[0][0]\n    del sorted_combinations[prioritised_task] \n\n    return prioritised_task\n\n", "score": null}