{"sample_order": 14, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of satellite index, pass index, and task index\n    that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function determines the priority based on the number of points that can be covered by each task,\n    prioritizing the task with the maximum number of cover points,\n    and in case of equal numbers, the task with smaller satellite-index is prioritized.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    max_cover_points = -1\n    min_sat_index = float('inf')\n    min_pass_index = float('inf')\n    min_task_index = float('inf')\n\n    for comb, cover_points in sorted_combinations.items():\n        if len(cover_points) > max_cover_points:\n            max_cover_points = len(cover_points)\n            min_sat_index = comb[0]\n            min_pass_index = comb[1]\n            min_task_index = comb[2]\n        elif len(cover_points) == max_cover_points:\n            if comb[0] < min_sat_index:\n                min_sat_index = comb[0]\n                min_pass_index = comb[1]\n                min_task_index = comb[2]\n            elif comb[0] == min_sat_index:\n                if comb[1] < min_pass_index:\n                    min_pass_index = comb[1]\n                    min_task_index = comb[2]\n                elif comb[1] == min_pass_index:\n                    if comb[2] < min_task_index:\n                        min_task_index = comb[2]\n\n    return (min_sat_index, min_pass_index, min_task_index)\n\n", "score": 64.17910447761194}