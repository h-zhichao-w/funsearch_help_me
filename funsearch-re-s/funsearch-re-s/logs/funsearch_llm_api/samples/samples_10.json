{"sample_order": 10, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Get the combination of task id and its coverage that should be prioritised from the sorted combinations,\n    taking into account additional criteria for more advanced prioritization.\n    This version considers not only the coverage but also additional criteria like task criticality, required resources, and execution time.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The dict is sorted in ascending order on the number of points that can be covered.\n        additional_criteria: dict, holds additional information for each task, such as criticality, resources, and duration. The key is a tuple in the same format as sorted_combinations, and the value is another dict with keys 'criticality', 'resources', and 'duration'.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised, in the format of [satellite index, pass index, task index].\n    \"\"\"\n    # Initialize variables to keep track of the best task\n    best_task = None\n    max_priority_score = float('-inf')\n\n    for task, coverage in sorted_combinations.items():\n        task_criteria = additional_criteria.get(task, {})\n        # Calculate priority score based on coverage, criticality, resources, and duration\n        coverage_score = len(coverage)  # More points covered contributes positively\n        \n        # Fetch additional criteria, providing defaults if not available\n        criticality = task_criteria.get('criticality', 1)  # Assuming 1 as the default (neutral impact)\n        resources = task_criteria.get('resources', 1)  # The less resources required, the better\n        duration = task_criteria.get('duration', 1)  # Shorter duration is preferred\n\n        # Custom priority formula; you can adjust weights and formula as needed.\n        priority_score = (coverage_score ** 2 * criticality) / (resources * duration)\n\n        # Update best task if this task has a higher priority score.\n        if priority_score > max_priority_score:\n            max_priority_score = priority_score\n            best_task = task\n\n    if best_task:\n        return best_task\n    else:\n        return 0, 0, 0\n\n", "score": 0.0}