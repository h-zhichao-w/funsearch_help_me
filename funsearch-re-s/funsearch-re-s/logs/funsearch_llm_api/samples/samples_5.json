{"sample_order": 5, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Advanced algorithm to prioritize task allocations based on a composite score of coverage and diversity,\n    using a weighted sum method to balance between the number of points covered and distribution diversity across tasks.\n\n    Args:\n        sorted_combinations: dict containing sorted combinations of task id and its coverage. The key is a tuple,\n        in the format of [index of satellite, index of pass, index of task], and the value is a tuple,\n        containing the indices of points that can be covered by the task. The dict is sorted in ascending order\n        on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int]: the prioritized combination of [satellite index, pass index, task index].\n    \"\"\"\n\n    diversity_score = {}\n    max_coverage = max(len(points) for points in sorted_combinations.values())\n\n    # Calculate diversity score for each task\n    for key, value in sorted_combinations.items():\n        coverage = len(value)\n        diversity = len(set(value))\n        coverage_score = (coverage / max_coverage) if max_coverage else 0\n        \n        # Adjust weights according to preferences\n        weighted_score = 0.7 * coverage_score + 0.3 * (diversity / coverage if coverage else 0)\n        diversity_score[key] = weighted_score\n\n    # Select the task with the highest score\n    selected_task = max(diversity_score, key=diversity_score.get)\n\n    # Bonus logic: Prevent selection of tasks with zero coverage unless there are no alternatives\n    if max_coverage > 0 and len(sorted_combinations[selected_task]) == 0:\n        filtered_combinations = {k: v for k, v in sorted_combinations.items() if len(v) > 0}\n        \n        if filtered_combinations:\n            # Recalculate diversity score without zero coverage tasks\n            return advanced_priority_algorithm(filtered_combinations)\n    \n    return selected_task\n\n", "score": 55.032021369410586}