{"sample_order": 8, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    \"\"\"\n    Improved version of `priority_v0`.\n    \n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list. The criterion for prioritisation is:\n        - The task that can cover the most points is prioritised.\n        - If two tasks can cover the same number of points, the task whose corresponding satellite has the lowest number of tasks remaining is prioritised.\n        - If there is still a tie, randomly select a task.\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n    \"\"\"\n\n    keys = list(sorted_combinations.keys())\n    values = list(sorted_combinations.values())\n    number_of_points_covered = [len(value) for value in values]\n\n    max_number_of_points_covered = max(number_of_points_covered)\n    indices_with_max_number_of_points_covered = [idx for idx, value in enumerate(number_of_points_covered) if value == max_number_of_points_covered]\n\n    if len(indices_with_max_number_of_points_covered) == 1:\n        return keys[indices_with_max_number_of_points_covered[0]]\n    else:\n        satellites_with_max_number_of_points_covered = [keys[idx][0] for idx in indices_with_max_number_of_points_covered]\n        number_of_tasks_remaining_for_each_satellite = [sum([1 for key in keys if key[0] == satellite]) for satellite in satellites_with_max_number_of_points_covered]\n        min_number_of_tasks_remaining = min(number_of_tasks_remaining_for_each_satellite)\n        indices_with_min_number_of_tasks_remaining = [idx for idx, value in enumerate(number_of_tasks_remaining_for_each_satellite) if value == min_number_of_tasks_remaining]\n\n        if len(indices_with_min_number_of_tasks_remaining) == 1:\n            return keys[indices_with_min_number_of_tasks_remaining[0]]\n        else:\n            return keys[np.random.choice(indices_with_min_number_of_tasks_remaining)]\n\n", "score": -54.35480394922426}